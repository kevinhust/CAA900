[tool:pytest]
# Test discovery
testpaths = test/backend
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_*

# Test execution options
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --cov=app
    --cov-report=html:test/reports/coverage/backend/html
    --cov-report=xml:test/reports/coverage/backend/coverage.xml
    --cov-report=term-missing
    --cov-fail-under=85
    --cov-branch
    --asyncio-mode=auto
    --durations=10
    --maxfail=5

# Test markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (database, external services)
    slow: Slow tests (can be skipped in development)
    graphql: GraphQL-specific tests
    auth: Authentication and authorization tests
    performance: Performance and load tests
    security: Security-related tests
    database: Tests requiring database connection
    external: Tests requiring external services
    smoke: Smoke tests for basic functionality
    regression: Regression tests for bug fixes
    critical: Critical path tests
    api: API endpoint tests
    service: Service layer tests
    model: Model layer tests
    util: Utility function tests

# Async test configuration
asyncio_mode = auto

# Warning filters
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:graphql.*
    error::UserWarning:app.*

# Test collection
collect_ignore = [
    "node_modules",
    "build", 
    "dist",
    ".git",
    "__pycache__"
]

# Minimum test coverage by file type
# Individual file coverage requirements
[tool:coverage:run]
source = app/
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */node_modules/*
    */conftest.py
    */settings/*
    */.pytest_cache/*

[tool:coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Coverage thresholds per module
fail_under = 85
show_missing = True
skip_covered = False
sort = Cover

[tool:coverage:html]
directory = test/reports/coverage/backend/html
title = JobQuest Navigator Backend Coverage Report

[tool:coverage:xml]
output = test/reports/coverage/backend/coverage.xml