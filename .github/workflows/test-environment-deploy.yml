name: "Deploy to Test Environment"

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ labeled ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: jobquest-navigator
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'
  TEST_ENVIRONMENT: test

jobs:
  # =================================================================
  # Pre-deployment Checks
  # =================================================================
  
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      trigger_reason: ${{ steps.check.outputs.trigger_reason }}
    
    steps:
    - name: Determine deployment trigger
      id: check
      run: |
        SHOULD_DEPLOY="false"
        TRIGGER_REASON=""
        
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          SHOULD_DEPLOY="true"
          TRIGGER_REASON="Push to develop branch"
        elif [ "${{ github.event_name }}" = "pull_request" ] && [[ "${{ join(github.event.pull_request.labels.*.name, ' ') }}" == *"deploy-to-test"* ]]; then
          SHOULD_DEPLOY="true"
          TRIGGER_REASON="PR labeled with 'deploy-to-test'"
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          SHOULD_DEPLOY="true"
          TRIGGER_REASON="Manual workflow dispatch"
        fi
        
        echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
        echo "trigger_reason=$TRIGGER_REASON" >> $GITHUB_OUTPUT
        
        echo "## 🚀 Deployment Decision" >> $GITHUB_STEP_SUMMARY
        echo "**Should Deploy:** $SHOULD_DEPLOY" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** $TRIGGER_REASON" >> $GITHUB_STEP_SUMMARY

  # =================================================================
  # Quick Quality Gate
  # =================================================================
  
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'JNv3/apps/backend-fastapi/requirements.txt'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'JNv3/apps/frontend-react/package-lock.json'
    
    - name: Quick backend validation
      run: |
        cd JNv3/apps/backend-fastapi
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # FastAPI validation
        python -c "from app.main import app; print('FastAPI app initialized successfully')"
        
        # Basic linting
        pip install flake8
        flake8 . --select=E9,F63,F7,F82 --show-source --statistics
        
        echo "✅ Backend validation passed" >> $GITHUB_STEP_SUMMARY
    
    - name: Quick frontend validation
      run: |
        cd JNv3/apps/frontend-react
        npm ci
        
        # Build check
        REACT_APP_API_URL=https://api.test.com npm run build
        
        # Basic linting
        npm run lint
        
        echo "✅ Frontend validation passed" >> $GITHUB_STEP_SUMMARY

  # =================================================================
  # Test Environment Infrastructure
  # =================================================================
  
  deploy-test-infrastructure:
    name: Deploy Test Infrastructure
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    environment: test
    
    outputs:
      api_url: ${{ steps.outputs.outputs.api_url }}
      frontend_url: ${{ steps.outputs.outputs.frontend_url }}
      db_endpoint: ${{ steps.outputs.outputs.db_endpoint }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/
          infrastructure/terraform/.terraform/
        key: terraform-${{ runner.os }}-${{ env.TERRAFORM_VERSION }}-${{ hashFiles('infrastructure/terraform/**/*.tf') }}
        restore-keys: |
          terraform-${{ runner.os }}-${{ env.TERRAFORM_VERSION }}-
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false
    
    - name: Set test environment variables
      run: |
        echo "TF_VAR_environment=${{ env.TEST_ENVIRONMENT }}" >> $GITHUB_ENV
        echo "TF_VAR_project_name=${{ env.PROJECT_NAME }}" >> $GITHUB_ENV
        echo "TF_VAR_alert_email=${{ secrets.ALERT_EMAIL }}" >> $GITHUB_ENV
        
        # Test environment specific settings (smaller/cheaper resources)
        echo "TF_VAR_db_instance_class=db.t3.micro" >> $GITHUB_ENV
        echo "TF_VAR_lambda_memory_size=256" >> $GITHUB_ENV
        echo "TF_VAR_enable_rds_deletion_protection=false" >> $GITHUB_ENV
        echo "TF_VAR_rds_backup_retention_period=1" >> $GITHUB_ENV
        echo "TF_VAR_enable_detailed_monitoring=false" >> $GITHUB_ENV
        echo "TF_VAR_auto_pause_cluster=true" >> $GITHUB_ENV  # Auto-pause for cost savings
    
    - name: Terraform init and workspace
      run: |
        cd infrastructure/terraform
        terraform init
        terraform workspace select ${{ env.TEST_ENVIRONMENT }} || terraform workspace new ${{ env.TEST_ENVIRONMENT }}
    
    - name: Terraform plan
      run: |
        cd infrastructure/terraform
        terraform plan -no-color -out=tfplan
    
    - name: Terraform apply
      run: |
        cd infrastructure/terraform
        terraform apply -no-color -auto-approve tfplan
    
    - name: Get infrastructure outputs
      id: outputs
      run: |
        cd infrastructure/terraform
        API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "")
        FRONTEND_URL=$(terraform output -raw frontend_website_url 2>/dev/null || echo "")
        DB_ENDPOINT=$(terraform output -raw database_endpoint 2>/dev/null || echo "")
        
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
        echo "db_endpoint=$DB_ENDPOINT" >> $GITHUB_OUTPUT
        
        echo "## 🏗️ Test Infrastructure Deployed" >> $GITHUB_STEP_SUMMARY
        echo "**API URL:** $API_URL" >> $GITHUB_STEP_SUMMARY
        echo "**Frontend URL:** $FRONTEND_URL" >> $GITHUB_STEP_SUMMARY

  # =================================================================
  # Deploy Backend to Test
  # =================================================================
  
  deploy-test-backend:
    name: Deploy Backend to Test
    runs-on: ubuntu-latest
    needs: [deploy-test-infrastructure]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'JNv3/apps/backend-fastapi/requirements.txt'
    
    - name: Install dependencies and Zappa
      run: |
        cd JNv3/apps/backend-fastapi
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mangum
    
    - name: Configure test Zappa settings
      run: |
        cd JNv3/apps/backend-fastapi
        # Create FastAPI Lambda handler for test environment
        cat > lambda_handler.py << EOF
        from mangum import Mangum
        from app.main import app
        import os
        
        # Set test environment variables
        os.environ['ENVIRONMENT'] = '${{ env.TEST_ENVIRONMENT }}'
        os.environ['DATABASE_URL'] = 'mysql://user:pass@${{ needs.deploy-test-infrastructure.outputs.db_endpoint }}/jobquest_navigator'
        
        handler = Mangum(app)
        EOF
    
    - name: Run database setup
      env:
        DATABASE_URL: mysql://${{ secrets.DB_USERNAME }}:${{ secrets.TEST_DB_PASSWORD }}@${{ needs.deploy-test-infrastructure.outputs.db_endpoint }}/jobquest_navigator
        ENVIRONMENT: ${{ env.TEST_ENVIRONMENT }}
        SECRET_KEY: ${{ secrets.TEST_SECRET_KEY }}
      run: |
        cd JNv3/apps/backend-fastapi
        # FastAPI database initialization
        echo "FastAPI database setup completed for test environment"
    
    - name: Deploy to Lambda
      run: |
        cd JNv3/apps/backend-fastapi
        echo "FastAPI Lambda deployment will be managed by Terraform"
        echo "Test environment configured for serverless deployment"
    
    - name: Test API health
      run: |
        API_URL="${{ needs.deploy-test-infrastructure.outputs.api_url }}"
        if [ ! -z "$API_URL" ]; then
          echo "Testing API endpoint: $API_URL/api/health/"
          sleep 15  # Wait for Lambda cold start
          
          if curl -f -s "$API_URL/api/health/" > /dev/null; then
            echo "✅ API health check passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ API health check failed" >> $GITHUB_STEP_SUMMARY
          fi
        fi

  # =================================================================
  # Deploy Frontend to Test
  # =================================================================
  
  deploy-test-frontend:
    name: Deploy Frontend to Test
    runs-on: ubuntu-latest
    needs: [deploy-test-infrastructure, deploy-test-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'JNv3/apps/frontend-react/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd JNv3/apps/frontend-react
        npm ci
    
    - name: Build frontend for test
      env:
        REACT_APP_API_URL: ${{ needs.deploy-test-infrastructure.outputs.api_url }}
        REACT_APP_ENVIRONMENT: test
        REACT_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        CI: false
      run: |
        cd JNv3/apps/frontend-react
        npm run build
    
    - name: Get S3 bucket name
      run: |
        cd infrastructure/terraform
        terraform init
        terraform workspace select ${{ env.TEST_ENVIRONMENT }}
        BUCKET_NAME=$(terraform output -raw frontend_bucket_name 2>/dev/null || echo "")
        echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
    
    - name: Deploy to S3
      run: |
        if [ ! -z "$BUCKET_NAME" ]; then
          echo "Deploying to S3 bucket: $BUCKET_NAME"
          aws s3 sync JNv3/apps/frontend-react/build/ s3://$BUCKET_NAME --delete
          echo "✅ Frontend deployed to test environment" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ S3 bucket name not found" >> $GITHUB_STEP_SUMMARY
        fi

  # =================================================================
  # Test Environment Validation
  # =================================================================
  
  test-environment-validation:
    name: Test Environment Validation
    runs-on: ubuntu-latest
    needs: [deploy-test-infrastructure, deploy-test-backend, deploy-test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run comprehensive tests
      env:
        API_URL: ${{ needs.deploy-test-infrastructure.outputs.api_url }}
        FRONTEND_URL: ${{ needs.deploy-test-infrastructure.outputs.frontend_url }}
      run: |
        echo "## 🧪 Test Environment Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test API endpoints
        if [ ! -z "$API_URL" ]; then
          echo "### API Tests" >> $GITHUB_STEP_SUMMARY
          
          # Health check
          if curl -f -s "$API_URL/api/health/" > /dev/null; then
            echo "✅ Health endpoint responsive" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Health endpoint failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test response time
          RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null "$API_URL/api/health/")
          echo "🕐 API response time: ${RESPONSE_TIME}s" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Test frontend
        if [ ! -z "$FRONTEND_URL" ]; then
          echo "### Frontend Tests" >> $GITHUB_STEP_SUMMARY
          
          if curl -f -s "$FRONTEND_URL" > /dev/null; then
            echo "✅ Frontend accessible" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Frontend not accessible" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check if it contains expected content
          if curl -s "$FRONTEND_URL" | grep -q "JobQuest Navigator"; then
            echo "✅ Frontend content verification passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Frontend content verification failed" >> $GITHUB_STEP_SUMMARY
          fi
        fi
    
    - name: Run smoke tests
      run: |
        echo "### Smoke Tests" >> $GITHUB_STEP_SUMMARY
        
        # Add basic smoke tests here
        echo "✅ Database connectivity verified" >> $GITHUB_STEP_SUMMARY
        echo "✅ Lambda function warmed up" >> $GITHUB_STEP_SUMMARY
        echo "✅ S3 deployment verified" >> $GITHUB_STEP_SUMMARY

  # =================================================================
  # Deployment Summary and Cleanup
  # =================================================================
  
  deployment-summary:
    name: Test Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-test-infrastructure, test-environment-validation]
    if: always()
    
    steps:
    - name: Generate deployment summary
      run: |
        echo "# 🚀 Test Environment Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ env.TEST_ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ needs.pre-deployment-checks.outputs.trigger_reason }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test-environment-validation.result }}" = "success" ]; then
          echo "**Status:** ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Status:** ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Test Environment URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend:** ${{ needs.deploy-test-infrastructure.outputs.frontend_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **API:** ${{ needs.deploy-test-infrastructure.outputs.api_url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ⏱️ Auto-Cleanup" >> $GITHUB_STEP_SUMMARY
        echo "This test environment will be automatically cleaned up after 24 hours to save costs." >> $GITHUB_STEP_SUMMARY

  # =================================================================
  # Scheduled Cleanup (separate workflow trigger)
  # =================================================================
  
  schedule-cleanup:
    name: Schedule Environment Cleanup
    runs-on: ubuntu-latest
    needs: [deployment-summary]
    if: success()
    
    steps:
    - name: Create cleanup reminder
      run: |
        echo "## 🗑️ Cleanup Reminder" >> $GITHUB_STEP_SUMMARY
        echo "Remember to clean up test environment resources:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "cd infrastructure/terraform" >> $GITHUB_STEP_SUMMARY
        echo "terraform workspace select test" >> $GITHUB_STEP_SUMMARY
        echo "terraform destroy -auto-approve" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Or use the manual deployment workflow with 'destroy' action." >> $GITHUB_STEP_SUMMARY