name: JobQuest Navigator CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'JNv3/apps/backend-fastapi/**'
      - 'JNv3/apps/frontend-react/**'
      - 'JNv3/infrastructure/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'JNv3/apps/backend-fastapi/**'
      - 'JNv3/apps/frontend-react/**'
      - 'JNv3/infrastructure/**'
      - '.github/workflows/**'

env:
  # AWS Configuration
  AWS_REGION: us-east-1
  # Project Configuration
  PROJECT_NAME: jobquest-navigator
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'
  # Cache optimization
  CACHE_VERSION: 'v1'

jobs:
  # =================================================================
  # Code Quality and Testing
  # =================================================================
  
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'JNv3/apps/backend-fastapi/requirements.txt'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'JNv3/apps/frontend-react/package-lock.json'
    
    - name: Install Python dependencies
      run: |
        cd JNv3/apps/backend-fastapi
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort pylint bandit safety
    
    - name: Python code formatting check
      run: |
        cd JNv3/apps/backend-fastapi
        black --check --diff .
        isort --check-only --diff .
    
    - name: Python linting
      run: |
        cd JNv3/apps/backend-fastapi
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Python security scan
      run: |
        cd JNv3/apps/backend-fastapi
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Install frontend dependencies
      run: |
        cd JNv3/apps/frontend-react
        npm ci
    
    - name: Frontend linting
      run: |
        cd JNv3/apps/frontend-react
        npm run lint
    
    - name: Frontend type checking
      run: |
        cd JNv3/apps/frontend-react
        npm run type-check || true  # Optional if TypeScript is used
    
    - name: Check for hardcoded secrets
      run: |
        chmod +x .github/scripts/check-hardcoded-secrets.sh
        ./.github/scripts/check-hardcoded-secrets.sh
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          JNv3/apps/backend-fastapi/bandit-report.json
          JNv3/apps/backend-fastapi/safety-report.json

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          MYSQL_DATABASE: test_jobquest_navigator
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'JNv3/apps/backend-fastapi/requirements.txt'
    
    - name: Install dependencies
      run: |
        cd JNv3/apps/backend-fastapi
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest pytest-asyncio pytest-cov httpx
    
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -p${{ secrets.TEST_DB_PASSWORD }} --silent; do
          sleep 1
        done
    
    - name: Run FastAPI tests
      env:
        DATABASE_URL: mysql://root:${{ secrets.TEST_DB_PASSWORD }}@127.0.0.1:3306/test_jobquest_navigator
        SECRET_KEY: ${{ secrets.TEST_SECRET_KEY }}
        ENVIRONMENT: test
        ADZUNA_API_KEY: ${{ secrets.ADZUNA_API_KEY }}
        GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
      run: |
        cd JNv3/apps/backend-fastapi
        python -m pytest --cov=app --cov-report=xml --cov-report=term-missing
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: JNv3/apps/backend-fastapi/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'JNv3/apps/frontend-react/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd JNv3/apps/frontend-react
        npm ci
    
    - name: Run tests
      run: |
        cd JNv3/apps/frontend-react
        npm test -- --coverage --watchAll=false
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: JNv3/apps/frontend-react/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # =================================================================
  # Infrastructure Validation
  # =================================================================
  
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/
          infrastructure/terraform/.terraform/
        key: terraform-${{ runner.os }}-${{ env.TERRAFORM_VERSION }}-${{ hashFiles('infrastructure/terraform/**/*.tf') }}
        restore-keys: |
          terraform-${{ runner.os }}-${{ env.TERRAFORM_VERSION }}-
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform fmt check
      run: |
        cd infrastructure/terraform
        terraform fmt -check -recursive
    
    - name: Terraform init
      run: |
        cd infrastructure/terraform
        terraform init -backend=false
    
    - name: Terraform validate
      run: |
        cd infrastructure/terraform
        terraform validate
    
    - name: Terraform plan (dry run)
      env:
        TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
        TF_VAR_project_name: ${{ env.PROJECT_NAME }}
        TF_VAR_environment: "ci"
        TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
      run: |
        cd infrastructure/terraform
        terraform plan -no-color

  cloudformation-validate:
    name: CloudFormation Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Validate CloudFormation template
      run: |
        aws cloudformation validate-template \
          --template-body file://infrastructure/cloudformation-template.yaml

  # =================================================================
  # Build and Package
  # =================================================================
  
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'JNv3/apps/backend-fastapi/requirements.txt'
    
    - name: Install dependencies
      run: |
        cd JNv3/apps/backend-fastapi
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mangum
    
    - name: Create Lambda package
      env:
        ENVIRONMENT: production
      run: |
        cd JNv3/apps/backend-fastapi
        # Create FastAPI Lambda handler
        echo 'from mangum import Mangum' > lambda_handler.py
        echo 'from app.main import app' >> lambda_handler.py
        echo 'handler = Mangum(app)' >> lambda_handler.py
    
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-package
        path: JNv3/apps/backend-fastapi/
        retention-days: 7

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [code-quality, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'JNv3/apps/frontend-react/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd JNv3/apps/frontend-react
        npm ci
    
    - name: Build production frontend
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
        REACT_APP_ENVIRONMENT: production
        REACT_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        CI: false  # Treat warnings as warnings, not errors
      run: |
        cd JNv3/apps/frontend-react
        npm run build
    
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: JNv3/apps/frontend-react/build/
        retention-days: 7

  # =================================================================
  # Security Scanning
  # =================================================================
  
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better security analysis
    
    - name: Cache Trivy DB
      uses: actions/cache@v3
      with:
        path: ~/.cache/trivy
        key: trivy-db-${{ runner.os }}-${{ hashFiles('**/requirements.txt', '**/package-lock.json') }}
        restore-keys: |
          trivy-db-${{ runner.os }}-
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        ignore-unfixed: true
    
    - name: Run Trivy config scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-config-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-vulnerabilities'
    
    - name: Upload Trivy config results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-config-results.sarif'
        category: 'trivy-config'

  # =================================================================
  # Deployment Jobs
  # =================================================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [terraform-validate, cloudformation-validate, build-backend, build-frontend, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Deploy infrastructure
      env:
        TF_VAR_environment: staging
        TF_VAR_project_name: ${{ env.PROJECT_NAME }}
        TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
        TF_VAR_db_instance_class: db.t3.micro
        TF_VAR_lambda_memory_size: 256
        TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
        TF_VAR_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
      run: |
        cd infrastructure/terraform
        terraform init
        terraform workspace select staging || terraform workspace new staging
        terraform plan -no-color
        terraform apply -auto-approve -no-color
    
    - name: Download backend package
      uses: actions/download-artifact@v3
      with:
        name: backend-package
        path: JNv3/apps/backend-fastapi/
    
    - name: Deploy backend
      env:
        ENVIRONMENT: staging
      run: |
        cd JNv3/apps/backend-fastapi
        pip install mangum
        # FastAPI deployment will be handled by CDK/Terraform
        echo "FastAPI deployment configured for serverless"
    
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: JNv3/apps/frontend-react/build/
    
    - name: Deploy frontend
      run: |
        BUCKET_NAME=$(cd infrastructure/terraform && terraform output -raw frontend_bucket_name)
        aws s3 sync JNv3/apps/frontend-react/build/ s3://$BUCKET_NAME --delete
    
    - name: Run deployment verification
      run: |
        chmod +x scripts/verify-deployment.sh
        scripts/verify-deployment.sh

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [terraform-validate, cloudformation-validate, build-backend, build-frontend, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Deploy infrastructure
      env:
        TF_VAR_environment: production
        TF_VAR_project_name: ${{ env.PROJECT_NAME }}
        TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
        TF_VAR_db_instance_class: db.t3.small
        TF_VAR_lambda_memory_size: 512
        TF_VAR_enable_rds_deletion_protection: true
        TF_VAR_rds_backup_retention_period: 30
        TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
        TF_VAR_s3_bucket_name: ${{ secrets.S3_BUCKET_NAME }}
        TF_VAR_database_password: ${{ secrets.DB_PASSWORD }}
      run: |
        cd infrastructure/terraform
        terraform init
        terraform workspace select production || terraform workspace new production
        terraform plan -no-color
        terraform apply -auto-approve -no-color
    
    - name: Download backend package
      uses: actions/download-artifact@v3
      with:
        name: backend-package
        path: JNv3/apps/backend-fastapi/
    
    - name: Deploy backend
      env:
        ENVIRONMENT: staging
      run: |
        cd JNv3/apps/backend-fastapi
        pip install mangum
        # FastAPI deployment will be handled by CDK/Terraform
        echo "FastAPI deployment configured for serverless"
    
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: JNv3/apps/frontend-react/build/
    
    - name: Deploy frontend
      run: |
        BUCKET_NAME=$(cd infrastructure/terraform && terraform output -raw frontend_bucket_name)
        aws s3 sync JNv3/apps/frontend-react/build/ s3://$BUCKET_NAME --delete
        
        # Invalidate CloudFront if enabled
        DISTRIBUTION_ID=$(cd infrastructure/terraform && terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
        if [ ! -z "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "null" ]; then
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
        fi
    
    - name: Run deployment verification
      run: |
        chmod +x scripts/verify-deployment.sh
        scripts/verify-deployment.sh
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "🚀 Production deployment successful!"
        echo "Frontend URL: $(cd infrastructure/terraform && terraform output -raw frontend_website_url)"
        echo "API URL: $(cd infrastructure/terraform && terraform output -raw api_gateway_url)"

  # =================================================================
  # Post-Deployment Jobs
  # =================================================================
  
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get deployment URLs
      run: |
        cd infrastructure/terraform
        terraform workspace select staging
        echo "API_URL=$(terraform output -raw api_gateway_url)" >> $GITHUB_ENV
        echo "FRONTEND_URL=$(terraform output -raw frontend_website_url)" >> $GITHUB_ENV
    
    - name: Run basic performance tests
      run: |
        # Test API response time
        API_RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null $API_URL/api/health/)
        echo "API Response Time: ${API_RESPONSE_TIME}s"
        
        # Test frontend loading time
        FRONTEND_RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null $FRONTEND_URL)
        echo "Frontend Response Time: ${FRONTEND_RESPONSE_TIME}s"
        
        # Basic load test with curl
        echo "Running basic load test..."
        for i in {1..10}; do
          curl -s $API_URL/api/health/ > /dev/null &
        done
        wait

  cleanup-staging:
    name: Cleanup Staging (Optional)
    runs-on: ubuntu-latest
    needs: [performance-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push' && vars.AUTO_CLEANUP_STAGING == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Destroy staging infrastructure
      run: |
        cd infrastructure/terraform
        terraform init
        terraform workspace select staging
        terraform destroy -auto-approve -no-color