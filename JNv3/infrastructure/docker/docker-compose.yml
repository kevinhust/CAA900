version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: jobquest_db_v2
    environment:
      POSTGRES_DB: jobquest_navigator_v2
      POSTGRES_USER: jobquest_user
      POSTGRES_PASSWORD: jobquest_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"  # Use different port to avoid conflicts
    networks:
      - jobquest_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jobquest_user -d jobquest_navigator_v2"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: jobquest_redis_v2
    command: redis-server --appendonly yes --requirepass jobquest_redis_2024
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"  # Use different port to avoid conflicts
    networks:
      - jobquest_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ../../apps/backend-fastapi
      dockerfile: Dockerfile
    container_name: jobquest_backend_v2
    environment:
      # Database Configuration
      DATABASE_URL: ${DATABASE_URL:-postgresql+asyncpg://jobquest_user:jobquest_password_2024@db:5432/jobquest_navigator_v2}
      
      # Redis Configuration
      REDIS_URL: ${REDIS_URL:-redis://:jobquest_redis_2024@redis:6379/0}
      
      # Application Settings
      ENVIRONMENT: development
      DEBUG: true
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      
      # AWS Cognito Configuration
      COGNITO_USER_POOL_ID: "us-east-1_blSZREFys"
      COGNITO_CLIENT_ID: "5iui547bod6sqgsi1a4heidpep"
      AWS_REGION: us-east-1
      
      # CORS Settings
      CORS_ORIGINS: "http://localhost:3000,http://localhost:3001"
      
      # Legacy Django GraphQL endpoint (for migration)
      DJANGO_GRAPHQL_ENDPOINT: http://host.docker.internal:8000/graphql/
      
      # Storage Configuration
      # MinIO (Development)
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
      MINIO_SECURE: false
      MINIO_BUCKET_NAME: jobquest-resumes
      
      # AWS S3 (Production) - Add your credentials here when deploying to production
      AWS_STORAGE_BUCKET_NAME: caa900resume
      AWS_S3_REGION_NAME: us-east-1
      # AWS_ACCESS_KEY_ID: ""  # Set this via environment or AWS credentials
      # AWS_SECRET_ACCESS_KEY: ""  # Set this via environment or AWS credentials
    volumes:
      - ../../apps/backend-fastapi:/app
      - backend_logs:/app/logs
    ports:
      - "8001:8000"  # FastAPI on port 8001 externally
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - jobquest_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ../../apps/frontend-react
      dockerfile: Dockerfile
    container_name: jobquest_frontend_v2
    environment:
      # Backend API Configuration
      REACT_APP_GRAPHQL_URL: http://localhost:8001/graphql
      
      # Feature Flags
      REACT_APP_USE_FASTAPI_JOBS: true
      REACT_APP_USE_FASTAPI_AUTH: true
      
      # Development Settings
      REACT_APP_ENV: development
      REACT_APP_DEBUG_MODE: true
      REACT_APP_BYPASS_AUTH: false
      REACT_APP_DEV_AUTH_BYPASS: true
      
      # Build Configuration
      GENERATE_SOURCEMAP: false
      DISABLE_ESLINT_PLUGIN: true
    volumes:
      - ../../apps/frontend-react:/app
      - /app/node_modules  # Anonymous volume for node_modules
    ports:
      - "3001:3000"  # React on port 3001 externally to avoid conflicts
    depends_on:
      - backend
    networks:
      - jobquest_network
    command: npm start
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: jobquest_nginx_v2
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - jobquest_network
    profiles:
      - production

  # MailHog for Email Testing (Development)
  mailhog:
    image: mailhog/mailhog
    container_name: jobquest_mailhog_v2
    ports:
      - "1026:1025"  # SMTP port
      - "8026:8025"  # Web UI port
    networks:
      - jobquest_network
    profiles:
      - development

  # MinIO for S3-compatible Storage (Development)
  minio:
    image: minio/minio
    container_name: jobquest_minio_v2
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_DEFAULT_BUCKETS: jobquest-resumes
    volumes:
      - minio_data:/data
    ports:
      - "9001:9000"  # API port
      - "9002:9001"  # Console port
    networks:
      - jobquest_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  minio_data:
    driver: local

networks:
  jobquest_network:
    driver: bridge